{"version":3,"sources":["ips.js"],"names":["debug","Model","options","modelName","createdByIp","updatedByIp","required","settings","validateUpsert","console","warn","defineProperty","type","String","observe","ctx","next","skipUpdatedAt","ip","getClientIp","instance","isNewInstance","id","pluralModelName","where","data","req","get_ip","clientIp"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;AACA,IAAMA,QAAQ,sBAAd;;kBAEe,UAACC,KAAD,EAAyB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;;AAEtCF,QAAM,wBAAN,EAAgCC,MAAME,SAAtC;;AAEAD,YAAU,SAAc,EAACE,aAAa,aAAd,EAA6BC,aAAa,aAA1C,EAAyDC,UAAU,IAAnE,EAAd,EAAwFJ,OAAxF,CAAV;;AAEAF,QAAM,SAAN,EAAiBE,OAAjB;;AAEAF,QAAM,+BAAN,EAAuCC,MAAMM,QAAN,CAAeC,cAAtD;AACA,MAAIP,MAAMM,QAAN,CAAeC,cAAf,IAAiCN,QAAQI,QAA7C,EAAuD;AACrDG,YAAQC,IAAR,CAAa,yFAAb;AACD;AACDT,QAAMM,QAAN,CAAeC,cAAf,GAAgC,KAAhC;;AAEAP,QAAMU,cAAN,CAAqBT,QAAQE,WAA7B,EAA0C,EAACQ,MAAMC,MAAP,EAAeP,UAAUJ,QAAQI,QAAjC,EAA1C;AACAL,QAAMU,cAAN,CAAqBT,QAAQG,WAA7B,EAA0C,EAACO,MAAMC,MAAP,EAAeP,UAAUJ,QAAQI,QAAjC,EAA1C;;AAEAL,QAAMa,OAAN,CAAc,aAAd,EAA6B,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC1ChB,UAAM,aAAN,EAAqBe,IAAIb,OAAzB;AACA,QAAIa,IAAIb,OAAJ,IAAea,IAAIb,OAAJ,CAAYe,aAA/B,EAA8C;AAAE,aAAOD,MAAP;AAAgB;;AAEhE,QAAIE,KAAKC,YAAYJ,GAAZ,EAAiBC,IAAjB,CAAT;;AAEA,QAAID,IAAIK,QAAR,EAAkB;AAChB,UAAIL,IAAIM,aAAR,EAAuB;AACrBrB,cAAM,iBAAN,EAAyBe,IAAId,KAAJ,CAAUE,SAAnC,EAA8CD,QAAQE,WAAtD,EAAmEW,IAAIK,QAAJ,CAAaE,EAAhF,EAAoFJ,EAApF;AACAlB,cAAM,yBAAN,EAAiCe,IAAId,KAAJ,CAAUE,SAA3C,EAAsDD,QAAQE,WAA9D,EAA2EW,IAAIK,QAAJ,CAAaE,EAAxF;AACAP,YAAIK,QAAJ,CAAalB,QAAQE,WAArB,IAAoCc,EAApC;AACD,OAJD,MAIO;AACLlB,cAAM,iBAAN,EAAyBe,IAAId,KAAJ,CAAUE,SAAnC,EAA8CD,QAAQG,WAAtD,EAAmEU,IAAIK,QAAJ,CAAaE,EAAhF,EAAoFJ,EAApF;AACAlB,cAAM,uBAAN,EAA+Be,IAAId,KAAJ,CAAUE,SAAzC,EAAoDD,QAAQG,WAA5D,EAAyEU,IAAIK,QAAJ,CAAaE,EAAtF;AACAP,YAAIK,QAAJ,CAAalB,QAAQG,WAArB,IAAoCa,EAApC;AACD;AACF,KAVD,MAUO;AACLlB,YAAM,iBAAN,EAAyBe,IAAId,KAAJ,CAAUsB,eAAnC,EAAoDrB,QAAQG,WAA5D,EAAyEU,IAAIS,KAA7E,EAAoFN,EAApF;AACAlB,YAAM,iCAAN,EAAyCe,IAAId,KAAJ,CAAUsB,eAAnD,EAAoErB,QAAQG,WAA5E,EAAyFU,IAAIS,KAA7F;AACAT,UAAIU,IAAJ,CAASvB,QAAQG,WAAjB,IAAgCa,EAAhC;AACD;AACDF;AACD,GAtBD;;AAwBA,WAASG,WAAT,CAAqBJ,GAArB,EAA0BC,IAA1B,EAAgC;AAC9B;AACA,QAAID,IAAIW,GAAR,EAAa;AAAE,aAAO,wBAASC,MAAT,CAAgBD,GAAhB,EAAqBE,QAA5B;AAAuC,KAFxB,CAEyB;AACvD;AACA,WAAOZ,MAAP;AACD;AAEF,C","file":"ips.js","sourcesContent":["import ipware from 'ipware';\nimport _debug from './debug';\nconst debug = _debug();\n\nexport default (Model, options = {}) => {\n\n  debug('Ips mixin for Model %s', Model.modelName);\n\n  options = Object.assign({createdByIp: 'createdByIp', updatedByIp: 'updatedByIp', required: true}, options);\n\n  debug('options', options);\n\n  debug('Model.settings.validateUpsert', Model.settings.validateUpsert);\n  if (Model.settings.validateUpsert && options.required) {\n    console.warn('IPs mixin requires validateUpsert be false. See @clarkbw/loopback-ds-timestamp-mixin#10');\n  }\n  Model.settings.validateUpsert = false;\n\n  Model.defineProperty(options.createdByIp, {type: String, required: options.required});\n  Model.defineProperty(options.updatedByIp, {type: String, required: options.required});\n\n  Model.observe('before save', (ctx, next) => {\n    debug('ctx.options', ctx.options);\n    if (ctx.options && ctx.options.skipUpdatedAt) { return next(); }\n\n    var ip = getClientIp(ctx, next);\n\n    if (ctx.instance) {\n      if (ctx.isNewInstance) {\n        debug('%s.%s: [%s][%s]', ctx.Model.modelName, options.createdByIp, ctx.instance.id, ip);\n        debug('%s.%s before create: %s', ctx.Model.modelName, options.createdByIp, ctx.instance.id);\n        ctx.instance[options.createdByIp] = ip;\n      } else {\n        debug('%s.%s: [%s][%s]', ctx.Model.modelName, options.updatedByIp, ctx.instance.id, ip);\n        debug('%s.%s before save: %s', ctx.Model.modelName, options.updatedByIp, ctx.instance.id);\n        ctx.instance[options.updatedByIp] = ip;\n      }\n    } else {\n      debug('%s.%s: [%j][%s]', ctx.Model.pluralModelName, options.updatedByIp, ctx.where, ip);\n      debug('%s.%s before update matching %j', ctx.Model.pluralModelName, options.updatedByIp, ctx.where);\n      ctx.data[options.updatedByIp] = ip;\n    }\n    next();\n  });\n\n  function getClientIp(ctx, next) {\n    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n    if (ctx.req) { return ipware().get_ip(req).clientIp; } // jshint ignore:line\n    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n    return next();\n  }\n\n};\n"],"sourceRoot":"/Users/daniel/fontes/temp/loopback-ds-ips-mixin/es6"}